{"version":3,"file":"component---smooth-doc-src-templates-doc-js-content-file-path-c-users-ivangsa-workspace-zenwave-zen-wave-360-github-io-website-pages-docs-sdk-mongodb-mdx-59a6a8c5fcdafbbefaf5.js","mappings":"8KAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,EAAG,IACHC,IAAK,MACLC,EAAG,IACHC,GAAI,KACJC,KAAM,OACNC,IAAK,QACJC,EAAAA,EAAAA,MAAsBX,EAAMY,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBZ,EAAYG,GAAI,CACnFU,GAAI,mCACJC,MAAO,CACLC,SAAU,aAEXH,EAAAA,cAAoBZ,EAAYI,EAAG,CACpCY,KAAM,oCACN,aAAc,6CACdC,UAAW,iBACVL,EAAAA,cAAoBZ,EAAYK,IAAK,CACtCa,wBAAyB,CACvBC,OAAQ,meAEP,oCAAqC,KAAMP,EAAAA,cAAoBZ,EAAYM,EAAG,KAAM,kEAAmE,KAAMM,EAAAA,cAAoBZ,EAAYM,EAAG,KAAM,sJAAuJ,KAAMM,EAAAA,cAAoBZ,EAAYM,EAAG,KAAM,wKAAyK,KAAMM,EAAAA,cAAoBZ,EAAYO,GAAI,CAClmBM,GAAI,gDACJC,MAAO,CACLC,SAAU,aAEXH,EAAAA,cAAoBZ,EAAYI,EAAG,CACpCY,KAAM,iDACN,aAAc,0DACdC,UAAW,iBACVL,EAAAA,cAAoBZ,EAAYK,IAAK,CACtCa,wBAAyB,CACvBC,OAAQ,meAEP,iDAAkD,KAAMP,EAAAA,cAAoBZ,EAAYM,EAAG,KAAM,yFAA0FM,EAAAA,cAAoBZ,EAAYQ,KAAM,KAAM,aAAc,cAAe,KAAMI,EAAAA,cAAoBZ,EAAYS,IAAK,KAAMG,EAAAA,cAAoBZ,EAAYQ,KAAM,CAC9VS,UAAW,gBACV,snBAAunB,KAAML,EAAAA,cAAoBZ,EAAYO,GAAI,CAClqBM,GAAI,6CACJC,MAAO,CACLC,SAAU,aAEXH,EAAAA,cAAoBZ,EAAYI,EAAG,CACpCY,KAAM,8CACN,aAAc,uDACdC,UAAW,iBACVL,EAAAA,cAAoBZ,EAAYK,IAAK,CACtCa,wBAAyB,CACvBC,OAAQ,meAEP,8CAA+C,KAAMP,EAAAA,cAAoBZ,EAAYM,EAAG,KAAM,mKAAoK,KAAMM,EAAAA,cAAoBZ,EAAYS,IAAK,KAAMG,EAAAA,cAAoBZ,EAAYQ,KAAM,CAC5VS,UAAW,gBACV,4jBAA6jB,KAAML,EAAAA,cAAoBZ,EAAYO,GAAI,CACxmBM,GAAI,4DACJC,MAAO,CACLC,SAAU,aAEXH,EAAAA,cAAoBZ,EAAYI,EAAG,CACpCY,KAAM,6DACN,aAAc,sEACdC,UAAW,iBACVL,EAAAA,cAAoBZ,EAAYK,IAAK,CACtCa,wBAAyB,CACvBC,OAAQ,meAEP,+DAAgE,KAAMP,EAAAA,cAAoBZ,EAAYS,IAAK,KAAMG,EAAAA,cAAoBZ,EAAYQ,KAAM,CAC1JS,UAAW,gBACV,moBACJ,CAKD,MAJA,SAAoBlB,QAAY,IAAZA,IAAAA,EAAQ,CAAC,GAC3B,MAAOqB,QAASC,GAAapB,OAAOC,OAAO,CAAC,GAAGQ,EAAAA,EAAAA,MAAsBX,EAAMY,YAC3E,OAAOU,EAAYT,EAAAA,cAAoBS,EAAWtB,EAAOa,EAAAA,cAAoBd,EAAmBC,IAAUD,EAAkBC,EAC7H,EC9DD,SAASuB,EAAT,GAAiC,IAAZ,SAACC,GAAWC,EAC/B,OAAOD,CACR,CAEc,SAASE,EAAiB1B,GACvC,OAAOa,EAAAA,cAAoBU,EAAavB,EAAOa,EAAAA,cAAoBc,EAAqB3B,GACzF,C","sources":["webpack://website/./pages/docs/SDK/Mongodb.mdx","webpack://website/../smooth-doc/src/templates/doc.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    a: \"a\",\n    div: \"div\",\n    p: \"p\",\n    h2: \"h2\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, {\n    id: \"backend-application-with-mongodb\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#backend-application-with-mongodb\",\n    \"aria-label\": \"backend application with mongodb permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Backend Application with MongoDB\"), \"\\n\", React.createElement(_components.p, null, \"With MongoDB each DDD Aggregate becomes a Collection Document.\"), \"\\n\", React.createElement(_components.p, null, \"With a Documental Database like MongoDB, mapping OneToMany and OneToOne relationships is trivial because they are represented as nested documents.\"), \"\\n\", React.createElement(_components.p, null, \"On the other hand ManyToOne and ManyToMany relationships needs a little more thought, and it greatly depends on the use case how you decide to denormalize the data.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"onetomany-and-onetoone-with-direct-references\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#onetomany-and-onetoone-with-direct-references\",\n    \"aria-label\": \"onetomany and onetoone with direct references permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"OneToMany and OneToOne with Direct References\"), \"\\n\", React.createElement(_components.p, null, \"With ZenWave ZDL you map OneToOne and OneToMany relationships as direct references to \", React.createElement(_components.code, null, \"@embedded\"), \" entities:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-zdl\"\n  }, \"@aggregate\\r\\n@auditting\\r\\nentity Customer {\\r\\n  username String required unique /** username javadoc comment */\\r\\n  email String required unique /** email javadoc comment */\\r\\n  tags String[] /** tags javadoc comment */\\r\\n  /**\\r\\n   * addresses is a direct reference to an embedded entity\\r\\n   */\\r\\n  addresses Address[]\\r\\n}\\r\\n\\r\\n@embedded\\r\\nentity Address {\\r\\n    street String /** street javadoc comment */\\r\\n    city String /** city javadoc comment */\\r\\n    state String /** state javadoc comment */\\r\\n    zip String /** zip javadoc comment */\\r\\n    type AddressType /** address type is an enum */\\r\\n}\\n\")), \"\\n\", React.createElement(_components.h2, {\n    id: \"onetomany-and-onetoone-with-nested-objects\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#onetomany-and-onetoone-with-nested-objects\",\n    \"aria-label\": \"onetomany and onetoone with nested objects permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"OneToMany and OneToOne with Nested Objects\"), \"\\n\", React.createElement(_components.p, null, \"The following example is equivalent to the previous one, but it uses nested objects instead of direct references. This improves readability and expressiveness.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-zdl\"\n  }, \"@aggregate\\r\\n@auditting\\r\\nentity Customer {\\r\\n  username String required unique /** username javadoc comment */\\r\\n  email String required unique /** email javadoc comment */\\r\\n  tags String[] /** tags javadoc comment */\\r\\n  /**\\r\\n   * addresses is a nested entity\\r\\n   */\\r\\n  addresses Address[] {\\r\\n    street String /** street javadoc comment */\\r\\n    city String /** city javadoc comment */\\r\\n    state String /** state javadoc comment */\\r\\n    zip String /** zip javadoc comment */\\r\\n    type AddressType /** address type is an enum */\\r\\n  }\\r\\n}\\n\")), \"\\n\", React.createElement(_components.h2, {\n    id: \"onetomany-and-onetoone-with-dbref-and-documentedreference\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#onetomany-and-onetoone-with-dbref-and-documentedreference\",\n    \"aria-label\": \"onetomany and onetoone with dbref and documentedreference permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"OneToMany and OneToOne with @DBRef and @DocumentedReference\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-zdl\"\n  }, \"@aggregate\\r\\n@auditting\\r\\nentity Customer {\\r\\n  username String required unique /** username javadoc comment */\\r\\n  email String required unique /** email javadoc comment */\\r\\n  tags String[] /** tags javadoc comment */\\r\\n  /**\\r\\n   * addresses is mapped using @DocumentedReference\\r\\n   */\\r\\n  @ref addresses Address[]\\r\\n}\\r\\n\\r\\n@aggregate\\r\\n@auditting\\r\\nentity Address {\\r\\n    street String /** street javadoc comment */\\r\\n    city String /** city javadoc comment */\\r\\n    state String /** state javadoc comment */\\r\\n    zip String /** zip javadoc comment */\\r\\n    type AddressType /** address type is an enum */\\r\\n}\\n\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"C:/Users/ivangsa/workspace/zenwave/ZenWave360.github.io/website/pages/docs/SDK/Mongodb.mdx\";\nimport {graphql} from 'gatsby';\nexport const pageQuery = graphql`\n  query DocPageQuery($id: String!) {\n    mdx(id: { eq: $id }) {\n      fields {\n        pageType\n        title\n      }\n      tableOfContents\n    }\n  }\n`;\nfunction DocTemplate({children}) {\n  return children;\n}\nDocTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(DocTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","a","div","p","h2","code","pre","_provideComponents","components","React","id","style","position","href","className","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","DocTemplate","children","_ref","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}