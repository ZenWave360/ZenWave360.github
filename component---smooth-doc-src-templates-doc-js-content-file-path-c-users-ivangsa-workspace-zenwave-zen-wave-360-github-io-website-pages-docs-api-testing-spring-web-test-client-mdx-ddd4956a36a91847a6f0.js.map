{"version":3,"file":"component---smooth-doc-src-templates-doc-js-content-file-path-c-users-ivangsa-workspace-zenwave-zen-wave-360-github-io-website-pages-docs-api-testing-spring-web-test-client-mdx-ddd4956a36a91847a6f0.js","mappings":"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","sources":["webpack://website/./pages/docs/API-Testing/Spring-WebTestClient.mdx","webpack://website/../smooth-doc/src/templates/doc.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    a: \"a\",\n    div: \"div\",\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, {\n    id: \"generating-spring-webtestclient\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#generating-spring-webtestclient\",\n    \"aria-label\": \"generating spring webtestclient permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Generating Spring WebTestClient\"), \"\\n\", React.createElement(_components.p, null, \"Generate Unit and Business Tests right from your OpenAPI definition.\"), \"\\n\", React.createElement(_components.p, null, \"Don't treat testing as an afterthought.\"), \"\\n\", React.createElement(_components.p, null, \"Generate SpringMVC or Spring WebFlux Unit or Business Tests skeletons using WebTestClient based on OpenAPI definition.\"), \"\\n\", React.createElement(_components.p, null, \"You can generate both:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(\"strong\", {\n    className: \"orange\"\n  }, \"Unit/Vertical/Integration Tests\"), \" for each OpenAPI Operation, it's up to you how you configure your BaseTest class.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(\"strong\", {\n    className: \"orange\"\n  }, \"Business Flow Tests\"), \" for a group of OpenAPI Operations that work together as a Business Use Case.\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"unit-tests-for-each-openapi-operation\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#unit-tests-for-each-openapi-operation\",\n    \"aria-label\": \"unit tests for each openapi operation permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Unit Tests for each OpenAPI Operation\"), \"\\n\", React.createElement(_components.p, null, \"You can use ZenWave IntelliJ Plugin with ZDL plugins:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-zdl\"\n  }, \"config {\\r\\n    plugins {\\r\\n▶️      SpringWebTestClientPlugin {\\r\\n            groupBy service\\r\\n            specFile \\\"modules/customers/src/main/resources/apis/openapi.yml\\\"\\r\\n            // these should match the values of openapi-generator-maven-plugin\\r\\n            openApiApiPackage \\\"{{basePackage}}.adapters.web\\\"\\r\\n            openApiModelPackage \\\"{{basePackage}}.adapters.web.model\\\"\\r\\n            openApiModelNameSuffix DTO\\r\\n            targetFolder \\\"src/test/java\\\"\\r\\n        }\\r\\n    }\\r\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"Or JBang CLI:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-shell\"\n  }, \"jbang zw -p io.zenwave360.sdk.plugins.SpringWebTestClientPlugin \\\\\\r\\n    specFile=src/main/resources/model/openapi.yml \\\\\\r\\n    targetFolder=src/test/java \\\\\\r\\n    testsPackage=io.zenwave360.example.adapters.web.tests \\\\\\r\\n    openApiApiPackage=io.zenwave360.example.adapters.web \\\\\\r\\n    openApiModelPackage=io.zenwave360.example.adapters.web.model \\\\\\r\\n    openApiModelNameSuffix=DTO \\\\\\r\\n    groupBy=service\\n\")), \"\\n\", React.createElement(_components.p, null, \"This is a sample of the code you get for a single OpenAPI Operation:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-java\"\n  }, \"/**\\r\\n* Integration tests for the {@link CustomerApi} REST controller.\\r\\n*/\\r\\npublic class CustomerApiIT extends BaseWebTestClientTest {\\r\\n\\r\\n    /**\\r\\n    * Test: Create customer javadoc comment for OK.\\r\\n    */\\r\\n    @Test\\r\\n    public void testCreateCustomer_201() {\\r\\n        CustomerDTO requestBody = new CustomerDTO();\\r\\n        requestBody.setId(null);\\r\\n        requestBody.setVersion(null);\\r\\n        requestBody.setFirstName(null);\\r\\n        requestBody.setLastName(null);\\r\\n        requestBody.setEmail(null);\\r\\n        requestBody.setPhone(null);\\r\\n        requestBody.setAddresses(new java.util.ArrayList<>());\\r\\n        requestBody.getAddresses().get(0).setIdentifier(\\\"aaa\\\");\\r\\n        requestBody.getAddresses().get(0).setStreet(\\\"aaa\\\");\\r\\n        requestBody.getAddresses().get(0).setCity(\\\"aaa\\\");\\r\\n        requestBody.getAddresses().get(0).setState(\\\"aaa\\\");\\r\\n        requestBody.getAddresses().get(0).setZip(\\\"aaa\\\");\\r\\n        requestBody.getAddresses().get(0).setType(new AddressTypeDTO());\\r\\n\\r\\n        webTestClient.method(POST).uri(\\\"/api/customers\\\")\\r\\n            .accept(MediaType.APPLICATION_JSON)\\r\\n            .contentType(MediaType.APPLICATION_JSON)\\r\\n            .bodyValue(requestBody)\\r\\n            .exchange()\\r\\n            .expectStatus().isEqualTo(201)\\r\\n            .expectHeader().contentType(MediaType.APPLICATION_JSON)\\r\\n            .expectBody()\\r\\n            .jsonPath(\\\"$.id\\\").isNotEmpty()\\r\\n            .jsonPath(\\\"$.version\\\").isNotEmpty()\\r\\n            .jsonPath(\\\"$.firstName\\\").isNotEmpty()\\r\\n            .jsonPath(\\\"$.lastName\\\").isNotEmpty()\\r\\n            .jsonPath(\\\"$.email\\\").isNotEmpty()\\r\\n            .jsonPath(\\\"$.phone\\\").isNotEmpty()\\r\\n            .jsonPath(\\\"$.addresses\\\").isNotEmpty()\\r\\n            .jsonPath(\\\"$.addresses\\\").isArray()\\r\\n            .jsonPath(\\\"$.addresses[0].identifier\\\").isNotEmpty()\\r\\n            .jsonPath(\\\"$.addresses[0].street\\\").isNotEmpty()\\r\\n            .jsonPath(\\\"$.addresses[0].city\\\").isNotEmpty()\\r\\n            .jsonPath(\\\"$.addresses[0].state\\\").isNotEmpty()\\r\\n            .jsonPath(\\\"$.addresses[0].zip\\\").isNotEmpty()\\r\\n            .jsonPath(\\\"$.addresses[0].type\\\").isNotEmpty();\\r\\n    }\\r\\n}\\n\")), \"\\n\", React.createElement(_components.h2, {\n    id: \"business-flow-test-for-some-openapi-operations-that-work-together\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#business-flow-test-for-some-openapi-operations-that-work-together\",\n    \"aria-label\": \"business flow test for some openapi operations that work together permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Business Flow Test for some OpenAPI Operations that work together\"), \"\\n\", React.createElement(_components.p, null, \"You can use ZenWave IntelliJ Plugin with ZDL plugins:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-zdl\"\n  }, \"config {\\r\\n    plugins {\\r\\n▶️      SpringWebTestClientPlugin {\\r\\n            groupBy businessFlow\\r\\n            businessFlowTestName CustomerCRUDTest\\r\\n            operationIds createCustomer,getCustomer,updateCustomer,deleteCustomer\\r\\n\\r\\n            specFile \\\"modules/customers/src/main/resources/apis/openapi.yml\\\"\\r\\n            // these should match the values of openapi-generator-maven-plugin\\r\\n            openApiApiPackage \\\"{{basePackage}}.adapters.web\\\"\\r\\n            openApiModelPackage \\\"{{basePackage}}.adapters.web.model\\\"\\r\\n            openApiModelNameSuffix DTO\\r\\n            targetFolder \\\"src/test/java\\\"\\r\\n        }\\r\\n    }\\r\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"Or JBang CLI:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-shell\"\n  }, \"jbang zw -p io.zenwave360.sdk.plugins.SpringWebTestClientPlugin \\\\\\r\\n    specFile=src/main/resources/model/openapi.yml \\\\\\r\\n    targetFolder=src/test/java \\\\\\r\\n    testsPackage=io.zenwave360.example.adapters.web.tests \\\\\\r\\n    openApiApiPackage=io.zenwave360.example.adapters.web \\\\\\r\\n    openApiModelPackage=io.zenwave360.example.adapters.web.model \\\\\\r\\n    openApiModelNameSuffix=DTO \\\\\\r\\n    groupBy=businessFlow \\\\\\r\\n    businessFlowTestName=CustomerCRUDTest \\\\\\r\\n    operationIds=createCustomer,getCustomer,updateCustomer,deleteCustomer\\n\")), \"\\n\", React.createElement(_components.p, null, \"This is the code you will get. Now it's just a matter of filling in the blanks and complete how each operation connects to the next one.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-java\"\n  }, \"public class CustomerCRUDTest extends BaseWebTestClientTest {\\r\\n\\r\\n    /**\\r\\n    * Business Flow Test for: createCustomer, updateCustomer, deleteCustomer, getCustomer.\\r\\n    */\\r\\n    @Test\\r\\n    public void testCustomerCRUDTest() {\\r\\n        // createCustomer: Create customer javadoc comment\\r\\n        CustomerDTO customerRequestBody0 = new CustomerDTO();\\r\\n        customerRequestBody0.setId(null);\\r\\n        customerRequestBody0.setVersion(null);\\r\\n        customerRequestBody0.setFirstName(null);\\r\\n        customerRequestBody0.setLastName(null);\\r\\n        customerRequestBody0.setEmail(null);\\r\\n        customerRequestBody0.setPhone(null);\\r\\n        customerRequestBody0.setAddresses(new java.util.ArrayList<>());\\r\\n        customerRequestBody0.getAddresses().get(0).setIdentifier(\\\"aaa\\\");\\r\\n        customerRequestBody0.getAddresses().get(0).setStreet(\\\"aaa\\\");\\r\\n        customerRequestBody0.getAddresses().get(0).setCity(\\\"aaa\\\");\\r\\n        customerRequestBody0.getAddresses().get(0).setState(\\\"aaa\\\");\\r\\n        customerRequestBody0.getAddresses().get(0).setZip(\\\"aaa\\\");\\r\\n        customerRequestBody0.getAddresses().get(0).setType(new AddressTypeDTO());\\r\\n\\r\\n        var createCustomerResponse0 = webTestClient.method(POST).uri(\\\"/api/customers\\\")\\r\\n            .accept(MediaType.APPLICATION_JSON)\\r\\n            .contentType(MediaType.APPLICATION_JSON)\\r\\n            .bodyValue(customerRequestBody0)\\r\\n            .exchange()\\r\\n            .expectStatus().isEqualTo(201)\\r\\n            .expectHeader().contentType(MediaType.APPLICATION_JSON)\\r\\n            .returnResult(CustomerDTO.class);\\r\\n\\r\\n        // updateCustomer: updateCustomer\\r\\n        CustomerDTO customerRequestBody1 = new CustomerDTO();\\r\\n        customerRequestBody1.setId(null);\\r\\n        customerRequestBody1.setVersion(null);\\r\\n        customerRequestBody1.setFirstName(null);\\r\\n        customerRequestBody1.setLastName(null);\\r\\n        customerRequestBody1.setEmail(null);\\r\\n        customerRequestBody1.setPhone(null);\\r\\n        customerRequestBody1.setAddresses(new java.util.ArrayList<>());\\r\\n        customerRequestBody1.getAddresses().get(0).setIdentifier(\\\"aaa\\\");\\r\\n        customerRequestBody1.getAddresses().get(0).setStreet(\\\"aaa\\\");\\r\\n        customerRequestBody1.getAddresses().get(0).setCity(\\\"aaa\\\");\\r\\n        customerRequestBody1.getAddresses().get(0).setState(\\\"aaa\\\");\\r\\n        customerRequestBody1.getAddresses().get(0).setZip(\\\"aaa\\\");\\r\\n        customerRequestBody1.getAddresses().get(0).setType(new AddressTypeDTO());\\r\\n        var customerId1 = \\\"\\\";\\r\\n\\r\\n        var updateCustomerResponse1 = webTestClient.method(PUT).uri(\\\"/api/customers/{customerId}\\\", customerId1)\\r\\n            .accept(MediaType.APPLICATION_JSON)\\r\\n            .contentType(MediaType.APPLICATION_JSON)\\r\\n            .bodyValue(customerRequestBody1)\\r\\n            .exchange()\\r\\n            .expectStatus().isEqualTo(200)\\r\\n            .expectHeader().contentType(MediaType.APPLICATION_JSON)\\r\\n            .returnResult(CustomerDTO.class);\\r\\n\\r\\n        // deleteCustomer: deleteCustomer\\r\\n        var customerId2 = \\\"\\\";\\r\\n\\r\\n        webTestClient.method(DELETE).uri(\\\"/api/customers/{customerId}\\\", customerId2)\\r\\n            .accept(MediaType.APPLICATION_JSON)\\r\\n            .exchange()\\r\\n            .expectStatus().isEqualTo(204);\\r\\n\\r\\n        // getCustomer: getCustomer\\r\\n        var customerId3 = \\\"\\\";\\r\\n\\r\\n        var getCustomerResponse3 = webTestClient.method(GET).uri(\\\"/api/customers/{customerId}\\\", customerId3)\\r\\n            .accept(MediaType.APPLICATION_JSON)\\r\\n            .exchange()\\r\\n            .expectStatus().isEqualTo(200)\\r\\n            .expectHeader().contentType(MediaType.APPLICATION_JSON)\\r\\n            .returnResult(CustomerDTO.class);\\r\\n\\r\\n    }\\r\\n}\\n\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"C:/Users/ivangsa/workspace/zenwave/ZenWave360.github.io/website/pages/docs/API-Testing/Spring-WebTestClient.mdx\";\nimport {graphql} from 'gatsby';\nexport const pageQuery = graphql`\n  query DocPageQuery($id: String!) {\n    mdx(id: { eq: $id }) {\n      fields {\n        pageType\n        title\n      }\n      tableOfContents\n    }\n  }\n`;\nfunction DocTemplate({children}) {\n  return children;\n}\nDocTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(DocTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","a","div","p","ul","li","h2","pre","code","_provideComponents","components","React","id","style","position","href","className","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","DocTemplate","children","_ref","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}